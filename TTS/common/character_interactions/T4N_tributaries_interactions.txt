#Tributaries Character Inetractions

call_suzerain_to_war = {
	use_diplomatic_range = no

	is_shown = {
		scope:actor = { #put here every tributary type which should be able to call suzerain
			scope:recipient = {
				OR = {
					is_target_in_variable_list = { name = permanent_tributaries target = prev }
					is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
				}
			}
			OR = {
				is_defender = yes
				is_attacker = yes
			}
			NOT = { is_at_war_with = scope:recipient }
		}
		scope:recipient = {
			exists = var:suzerain
		}
	}

	is_valid_showing_failures_only = {
		#all hail jank, this is a only way i think i can achive that xD
		NOT = {
			scope:actor = {
				exists = var:my_suzerain
				any_war_ally = {
					this = var:my_suzerain
				}
				var:my_suzerain = {
					is_target_in_variable_list = { name = permanent_tributaries target = prev }
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			if = {
				limit = {
					is_attacker = yes
				}
				add_attacker = scope:recipient
			}
			else = {
				add_defender = scope:recipient
			}
		}
	}

	ai_target_quick_trigger = {							# Quick triggers for the ai_targets
		adult = yes										# The target needs to be adult
		attracted_to_owner = yes						# The target needs to be attracted to owner
		owner_attracted = yes							# Owner needs to be attracted to the target
		prison = yes 									# Target must be in prison
	}
	ai_accept = {
		base = 20

		modifier = {  # Refuse call against Heir
			add = -1000
			exists = scope:recipient.player_heir
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			desc = WONT_FIGHT_HEIR_REASON
		}

		modifier = {  # Refuse call against Spouse
			add = -1000
			scope:recipient = {
				trigger_if = {
					limit = { scope:target.casus_belli.primary_defender = scope:actor }
					any_spouse = {
						this = scope:target.casus_belli.primary_attacker
					}
				}
				trigger_else = {
					any_spouse = {
						this = scope:target.casus_belli.primary_defender
					}
				}
				
			}
			desc = WONT_FIGHT_SPOUSE_REASON
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		# Honor factor
		ai_value_modifier = {
			ai_honor = 1
			min = 0
		}

		modifier = {  # Tends to join defensive wars
			add = 50
			scope:target.casus_belli.primary_defender = scope:actor
			desc = DEFENSIVE_WAR_REASON
		}

		compare_modifier = { # Likes fighting infidels
			trigger = {
				scope:recipient.faith = scope:actor.faith
				OR = {
					AND = {
						scope:target.casus_belli.primary_attacker = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
					AND = {
						scope:target.casus_belli.primary_defender = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
				}
			}
			target = scope:recipient
			value = ai_zeal
			desc = "ZEAL_AGAINST_INFIDELS"
			min = 0
			multiplier = 0.5
		}

		modifier = {  # Reluctant to attack another ally
			add = -50
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_defender
			}
			desc = ATTACK_ON_ALLY_REASON
		}

		modifier = {  # Reluctant to defend against another ally
			add = -25
			scope:target.casus_belli.primary_defender = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_attacker
			}
			desc = WAR_WITH_ALLY_REASON
		}

		modifier = {  # Reluctant to join wars against religious brethren.
			add = -50
			NOT = { scope:recipient.faith = scope:actor.faith }
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
			scope:target.casus_belli.war = {
				OR = {
					using_cb = minor_religious_war
					using_cb = religious_war
					using_cb = major_religious_war
					using_cb = undirected_great_holy_war
					using_cb = directed_great_holy_war
				}
			}
			desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
		}
	}

	# Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
	ai_will_do = {
		base = 100
		
		modifier = { # If the player is at war, do not bother them with offensive calls
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_ai = no
				any_character_war = {
					primary_defender = scope:recipient
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
			exists = scope:recipient.player_heir
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			factor = 0
		}
		
		modifier = { # Same with spouses
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				any_spouse = {
					this = scope:target.casus_belli.primary_attacker
				}
			}
			trigger_else = {
				any_spouse = {
					this = scope:target.casus_belli.primary_defender
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
			has_variable = delay_calling_recent_ally
			var:delay_calling_recent_ally = scope:recipient
			scope:target = {
				war_days >= 30
			}
			factor = 0

		}

		modifier = { # If the recipient is allied to both the attacker and the defender, the attacker shouldn't call
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender = {
				is_allied_to = scope:recipient
			}
			factor = 0
		}
	}
}

#Call Tributaries to war
call_tributaries_to_war = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	is_shown = {
		scope:actor = {
			exists = var:suzerain
			OR = {
				is_defender = yes
				is_attacker = yes
			}
		}
		scope:recipient = {
			exists = var:my_suzerain
			var:my_suzerain = {
				this = scope:actor
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			custom_tooltip = tributaries_not_already_called
			every_in_list = {
				variable = permanent_tributaries
				NOT = {
					any_war_ally = {
						this = prev
					}
				}
			}
		}
	}

	auto_accept = {
		always = yes
	}

	on_accept = {
		custom_description = {
			text = call_of_arms_is_sent_to_tributaries
		}
		scope:actor = {
			save_scope_as = suzerain_cta_caller
		}
		scope:recipient = {
			trigger_event = { id = tributaries.13 }
		}
	}
}

#ruler offers tribute to other character
offer_tribute = {
	category = interaction_category_diplomacy
	use_diplomatic_range = yes
	is_shown = {
		scope:actor = {
			NOR = {
				exists = var:suzerain
				exists = var:my_suzerain
			}
			is_at_war = no
			NOT = { this = scope:recipient }
		}
		scope:recipient = {
			NOT = {
				exists = var:my_suzerain
			}					
			NOT = {
				any_suzerain = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = scope:recipient }
						is_target_in_variable_list = { name = permanent_tributaries target = scope:recipient }
					}
				}
			}
			is_at_war = no				
		}
	}

	#Non Permanent trib
	send_option = {										
		is_shown = {
			always = yes
		}
		flag = non_permanent_trib							# If selected then scope:flag_name will be set to yes
		localization = non_permanent_trib				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	#Permanent trib
	send_option = {
		is_shown = {
			always = yes
		}
		flag = permanent_trib
		localization = permanent_trib	
	}

	send_options_exclusive = yes

	on_accept = {
		scope:actor = {
			trigger_event = { id = tributaries.9 }
			set_variable = { name = my_suzerain value = scope:recipient }
		}		
	}

	on_decline = {
		scope:recipient = {
			save_scope_as = not_suzerain
		}
		scope:actor = {
			trigger_event = { id = tributaries.12 }
		}
	}	

	ai_accept = {
		base = 5

		modifier = {
			add = 1000
			scope:actor.realm_size > scope:recipient.realm_size
			desc = will_accept_bigger_trib
		}
		modifier = {
			add = 500
			scope:actor.realm_size < scope:recipient.realm_size
			desc = will_accept_smaller_trib			
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = craven
					has_trait = trusting
					has_trait = lazy
				}
			}
			add = -40
			desc = dislike_those_traits
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = brave
					has_trait = paranoid
					has_trait = diligent
				}
			}
			add = 60
			desc = like_those_traits	
		}
		modifier = {
			scope:recipient = {
				is_at_war = yes
			}
			factor = 0
			desc = do_not_want_to_fight_trib_war
		}	
	}

	ai_will_do = {
		base = 10
		
		modifier = {
			scope:recipient.realm_size > scope:actor.realm_size
			add = 20
		}
		modifier = {
			scope:recipient.realm_size < scope:actor.realm_size
			factor = 0
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = craven
					has_trait = trusting
					has_trait = lazy
				}
			}
			add = 40
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = brave
					has_trait = paranoid
					has_trait = diligent
				}
			}
			add = -60
		}
	}
}

#Ruler offers character to become a tribute
ruler_offer_tribute_to_recipient = {
	category = interaction_category_diplomacy
	use_diplomatic_range = yes
	is_shown = {
		scope:actor = {
			NOT = {
				exists = var:my_suzerain
			}
			is_at_war = no
			NOT = { this = scope:recipient }
		}
		scope:recipient = {
			NOR = {
				exists = var:my_suzerain
				any_suzerain = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = scope:recipient }
						is_target_in_variable_list = { name = permanent_tributaries target = scope:recipient }
					}
				}
			}
		}
	}

	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					scope:non_permanent_trib = yes
				}
				var:my_suzerain = {
					add_to_variable_list = { name = non_permanent_tributaries target = prev }
				}
			}
			else_if = {
				limit = {
					scope:permanent_trib = yes
				}
				var:my_suzerain = {
					add_to_variable_list = { name = permanent_tributaries target = prev }
				}			
			}
			save_scope_as = trib
			var:my_suzerain = {
				trigger_event = { id = tributaries.9 }
			}
			set_variable = { name = my_suzerain value = scope:actor }
		}
	}

	on_decline = {
		scope:recipient = {
			save_scope_as = not_trib
		}
		scope:actor = {
			trigger_event = { id = tributaries.11 }
		}
	}

	#Non Permanent trib
	send_option = {										
		is_shown = {
			always = yes
		}
		flag = non_permanent_trib							# If selected then scope:flag_name will be set to yes
		localization = non_permanent_trib				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	#Permanent trib
	send_option = {
		is_shown = {
			always = yes
		}
		flag = permanent_trib
		localization = permanent_trib	
	}

	ai_accept = {
		base = 5

		modifier = {
			add = -1000
			scope:actor.realm_size < scope:recipient.realm_size
			desc = will_not_accept_smaller_suzerain
		}
		modifier = {
			add = 500
			scope:actor.realm_size > scope:recipient.realm_size
			desc = will_accept_bigger_suzerain		
		}
		modifier = {
			scope:recipient = {
				OR = {
					has_trait = craven
					has_trait = trusting
					has_trait = lazy
				}
			}
			add = -40
			desc = dislike_those_traits
		}
		modifier = {
			scope:recipient = {
				OR = {
					has_trait = brave
					has_trait = paranoid
					has_trait = diligent
				}
			}
			add = 60
			desc = like_those_traits	
		}
		modifier = {
			scope:actor = {
				is_at_war = yes
			}
			factor = 0
			desc = do_not_want_to_fight_suzerain_war
		}	
	}

	ai_will_do = {
		base = 10
		
		modifier = {
			scope:recipient.realm_size > scope:actor.realm_size
			add = 20
		}
		modifier = {
			scope:recipient.realm_size < scope:actor.realm_size
			factor = 0
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = craven
					has_trait = trusting
					has_trait = lazy
				}
			}
			add = -40
		}
		modifier = {
			scope:actor = {
				OR = {
					has_trait = brave
					has_trait = paranoid
					has_trait = diligent
				}
			}
			add = 60	
		}		
	}

	send_options_exclusive = yes
}

free_tributary = {
	category = interaction_category_diplomacy
	use_diplomatic_range = yes
	
	is_shown = {
		scope:actor = {
			NOT = {
				exists = var:my_suzerain
			}
			is_at_war = no
			NOT = { this = scope:recipient }
		}
		scope:recipient = {
			exists = var:my_suzerain
			var:my_suzerain = {
				this = scope:actor
			}
		}
	}
	
	auto_accept = {
		always = yes
	}
	
	on_accept = {
		scope:recipient = {
			remove_variable = my_suzerain
			if = {
				limit = {
					limit = {
						scope:actor = {
							is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						}
					}
					scope:actor = {
						remove_list_variable = { name = non_permanent_tributaries target = prev }
					}					
				}
			}
			else = {
				scope:actor = {
					remove_list_variable = { name = permanent_tributaries target = prev }
				}
			}
		}
		scope:actor = {
			trigger_event = { id = tributaries.4 }
		}
	}

	ai_will_do = {
		base = 0
	}
}

annex_tributary = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no

	is_shown = {
		scope:actor = {
			is_target_in_variable_list = { name = permanent_tributaries target = scope:recipient }
			NOT = {
				this = scope:recipient
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			exists = var:possible_vasalisation_year
			current_year <= var:possible_vasalisation_year.compare_value
		}
		scope:actor.primary_title.tier > scope:recipient.primary_title.tier
	}

	auto_accept = {
		always = yes
	}

	on_accept = {
		scope:recipient = {
			custom_description = {
                text = annex_tributary_desc
                subject = scope:recipient
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
				}
				change_liege = { liege = scope:actor change = scope:change }
				resolve_title_and_vassal_change = scope:change
				remove_variable = my_suzerain
				scope:actor = {
					remove_list_variable = { name = permanent_tributaries target = prev }
				}
			}
		}
	}

	ai_will_do = {
		base = 10
	}
}

turn_non_perma_tributary_to_perma = {
	category = interaction_category_diplomacy
	is_shown = {
		scope:actor = {
			is_target_in_variable_list = { name = non_permanent_tributaries target = scope:recipient }
			NOT = {
				this = scope:recipient
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			exists = var:possible_permafication_year
			current_year <= var:possible_permafication_year.compare_value
		}
	}

	auto_accept = {
		always = yes
	}

	on_accept = {
		scope:recipient = {
			custom_description = {
                text = non_permanent_trib_turns_into_perma
                subject = scope:recipient

				scope:actor = {
					remove_list_variable = { name = non_permanent_tributaries target = prev }
					add_to_variable_list = { name = permanent_tributaries target = prev }
				}
				set_variable = {
					name = possible_vasalisation_year
					value = { value = current_year add = 30} 
				}				
			}
		}
	}

	ai_will_do = {
		base = 10
	}	
}